#!/usr/bin/python

import os
import yaml
import sys
import subprocess
import signal
import threading
import multiprocessing
#import humanfriendly
import pytimeparse
import shlex
import time
import virtualbox
from virtualbox.library import LockType
from virtualbox.library import CloneMode
from virtualbox.library import CloneOptions
import virtualbox.library
import virtualbox.library_ext
import virtualbox.pool
import re
import logging
import pickle
#import asyncio
import argparse
import lockfile
#import asyncio



POWEREDOFF   = "PoweredOff"
ABORTED      = "Aborted"
SNAPSHOT_FIX = 1

pool         = re.compile(r'\d+$')
mate         = re.compile(r"mate-session")
 
VBOXMANAGE   = "/usr/bin/vboxmanage"
PICKLE_FILE  = "/var/tmp/vboxvdi.p"
WORKINGDIR   = "/home/choman/vboxvdi"
PIDFILE      = '/var/tmp/vboxvdi.pid'

USE_SOCKET   = False
DEBUG        = False

#parser = argparse.ArgumentParser(description='Process some integers.')
parser = argparse.ArgumentParser()

args = parser.parse_args()


class Config:
    def __init__(self):
        self.times = ["recycle_timeout", "delete_timeout"]

        with open("config.yml", 'r') as ymlfile:
            self.config = yaml.load(ymlfile)

        self.convert_times()
        self.print_debug()

    def convert_times(self):

        for item in self.times:

            if not str(self.config["pool"][item]).isdigit():
                x = pytimeparse.parse(self.config["pool"][item])
                self.config["pool"][item] = x

    def print_debug(self):
        if DEBUG:
            for section in self.config:
                self.logger.debug(section)

            self.logger.debug(self.config['general'])
            self.logger.debug(self.config['pool'])
            self.logger.debug(self.config['pool']['data_dir'])

class IPVS:
    def __init__(self, port=None):
        self.port = 0
        self.ipvs = "/opt/vboxvdi/ipvsadd.sh"

    def add(self, port):
        self.cmd = "sudo %s -a %s" % (self.ipvs, port)
        self.run()

    def delete(self, port):
        self.cmd = "sudo %s -d %s" % (self.ipvs, port)
        self.run()

    def run(self):
        cmd = shlex.split(self.cmd)
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        p.communicate()

class vboxvdi:
    def __init__(self):

        inuse  = []

        self.vdi  = Config()
        self.xray = IPVS()

        self.setup_logger()


        self.logger.info('Start Program')

        self.logger.debug('Reading config')
        self.logger.info('Reading config')

#        self.logger.info(self.vdi.config["pool"])

        self.vdiadmin         = self.vdi.config["general"]["vdiadmin"]
        self.vdipasswd        = self.vdi.config["general"]["vdipasswd"]
        self.BASE             = self.vdi.config["pool"]["base_image"]

        self.initsize         = self.vdi.config["pool"]["initial_size"]
        self.freesize         = self.vdi.config["pool"]["free_size"]
        self.free_count       = 0
        self.maxcount         = self.vdi.config["pool"]["max_size"]
        self.vmlist           = []
        self.cpu_count        = self.vdi.config["pool"]["cpu_count"]
        self.memory_size      = self.vdi.config["pool"]["mem_size"]
        self.data_dir         = self.vdi.config["pool"]["data_dir"]
        self.beginning_port   = self.vdi.config["pool"]["start_vrde_port"]
        self.vm_port          = self.beginning_port
        self.recycle_timeout  = self.vdi.config["pool"]["recycle_timeout"]
        self.delete_timeout   = self.vdi.config["pool"]["delete_timeout"]
        self.recycle_desktops = self.vdi.config["pool"]["recycle_desktops"]
        self.trackers         = {}
        self.active_sessions  = {}
        self.timer            = {}
        self.used             = {}
        self.reclone          = {}
        self.current_snapshot = ""


        self.PREFIX           = re.compile(r"^%s Clone" % self.BASE)
        self.clone_num        = re.compile(r"^%s Clone \(\d+\)" % self.BASE)


        self.vbox = virtualbox.VirtualBox()
        self.mgr  = virtualbox.Manager()

        self.print_vbox_info()

        self.__callbacks()
        self.__define_lock_types()
        self.__define_clone_modes()
        self.__define_clone_options()

        self.__getPickle()

        signal.signal(signal.SIGINT, self.handler)

        self.get_base_image()
        ##self.process = multiprocessing.Process(target=self.clone_vm)
        self.Pool    = multiprocessing.Pool(6)
        self.Queue   = multiprocessing.Queue(6)

        jobs    = []
        threads = []

#    def myrun(self):
        while True:

            time.sleep(1)

            del self.vmlist[:]
            for vm in self.vbox.machines:
                if self.PREFIX.search(vm.name):
                    self.vmlist.append(vm)
                    self.initialize_trackers(vm.name)

            self.getFreeCount()

##            [inuse.append(vm) for vm in self.vbox.machines if pool.search(vm.name)]

            self.free_count = self.cursize = len(self.vmlist)

            self.check_pool()

            if self.cursize >= self.maxcount: continue

            if 0:
                self.clone_vm()
            else:
                if 0:
                    self.process = multiprocessing.Process(target=self.clone_vm, args=[])
                    jobs.append(self.process)
                    self.process.start()
                    self.logger.info (self.Queue.get())
                    self.process.join()

                if 0:
                    self.Pool.map_async(self.clone_vm, []).get(3)

                if 1:
                    t = threading.Thread(target=self.clone_vm, args=())
                    threads.append(t)
                    t.start()
                    t.join()

    def __savePickle(self):
        pickle.dump(self.reclone, open(PICKLE_FILE, "wb"))

    def __getPickle(self):
        if os.path.exists(PICKLE_FILE):
            self.reclone = pickle.load(open(PICKLE_FILE, "rb"))

    def setup_logger(self):
        logging.basicConfig(level=logging.INFO,
                            format='%(relativeCreated)6d %(threadName)s %(message)s')
#                            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        self.logger    = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)

        self.logfile   = logging.FileHandler("log.info")
        self.errorfile = logging.FileHandler("log.err")

        self.logfile.setLevel(logging.INFO)
        self.errorfile.setLevel(logging.ERROR)

        self.formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        self.logfile.setFormatter(self.formatter)
        self.errorfile.setFormatter(self.formatter)

        self.logger.addHandler(self.logfile)
        self.logger.addHandler(self.errorfile)

        self.logger = logging.getLogger(__name__)

    def handler(self, signum, frame):
        self.logger.info('Exiting...')
        sys.exit()

    def getFreeCount(self):
        if 0:
            tmp = []

            for k, v in self.used.iteritems():
                self.logger.debug( k, v)
                if not v:
                    tmp.append(k)
            self.logger.debug(len(tmp))

        tmp = []
        [tmp.append(k) for k, v in self.used.iteritems() if not v]
        self.logger.info(len(tmp))

        self.free_count = len(tmp)

    def check_pool(self):
        self.getFreeCount()

        self.logger.info("")
        self.logger.info("")
        self.logger.info("")
        self.logger.info("")
        self.logger.info("Checking Pool:")

        self.logger.info("   - Total VMs:   %s", len(self.active_sessions.values()))
        self.logger.info("   - Free Size:   %s", self.freesize)
        self.logger.info("   - Free Count:  %s", self.free_count)

        self.__savePickle()

        for vm in self.vmlist:
            self.runstuff(vm.name, vm.state)

            self.logger.info ("")
            self.logger.info ("  - Name:   %s" % vm.name)
            self.logger.info ("  - State:  %s" % vm.state)
            self.logger.info ("  - Port:   %s" % vm.vrde_server.get_vrde_property("TCP/Ports"))
            self.logger.info ("  - Active: %s" % self.active_sessions[vm.name])
            self.logger.info ("  - Used:   %s" % self.used[vm.name])

            if not self.used[vm.name]:
                if self.reclone[vm.name]:
                    self.remove_vm(vm.name)
                    self.removeTracker(vm.name)
                    self.getFreeCount()

                elif self.free_count > self.freesize:
                    x = time.time() - self.timer[vm.name]

                    if x >= self.delete_timeout:
                        self.remove_vm(vm.name)
                        self.removeTracker(vm.name)
                        self.getFreeCount()



    def clone_vm(self):
        if self.cursize < self.initsize or self.free_count < self.freesize:
            self.clone_base_image()
            self.get_session()
            self.set_clone_settings()
            self.take_snapshot()
            self.launch_vm()

            self.initialize_trackers(self.clone.name)

    def removeTracker(self, vmname):
        del self.timer[vmname]
        del self.active_sessions[vmname]
        del self.used[vmname]
        del self.reclone[vmname]

    def initialize_trackers(self, vmname):
        self.timer.setdefault(vmname, time.time())
        self.active_sessions.setdefault(vmname, False)
        self.used.setdefault(vmname, False)
        self.reclone.setdefault(vmname, False)

    def __define_clone_modes(self):
        MACHINE_STATE             = CloneMode(1)
        MACHINE_AND_CHILD_STATES  = CloneMode(2)
        ALL_STATES                = CloneMode(3)

        MACHINE_STATE             = CloneMode.machine_state
        MACHINE_AND_CHILD_STATES  = CloneMode.machine_and_child_states
        ALL_STATES                = CloneMode.all_states

        self.CLONE_MODE           = MACHINE_STATE

    def __define_clone_options(self):
        LINK               = CloneOptions(1)
        KEEP_ALL_MA_CS     = CloneOptions(2)
        KEEP_NATMA_CS      = CloneOptions(3)
        KEEP_DISK_NAMES    = CloneOptions(3)

        LINK               = CloneOptions.link
        KEEP_ALL_MA_CS     = CloneOptions.keep_all_ma_cs
        KEEP_NATMA_CS      = CloneOptions.keep_natma_cs
        KEEP_DISK_NAMES    = CloneOptions.keep_disk_names

        self.CLONE_OPTS    = LINK

    def __define_lock_types(self):
        NULL_LOCK   = LockType(0)
        SHARED_LOCK = LockType(1)
        WRITE_LOCK  = LockType(2)
        VM_LOCK     = LockType(3)

        NULL_LOCK   = LockType.null
        SHARED_LOCK = LockType.shared
        WRITE_LOCK  = LockType.write
        VM_LOCK     = LockType.vm

        self.LOCKTYPE = SHARED_LOCK

    def __machine_state(self, event):
        self.logger.info("Machine %s state changed: %s" % (event.machine_id, event.state))

    def __session_state(self, event):
        self.logger.info("Session %s state changed: %s" % (event.machine_id, event.state))

    def __snapshot_taken(self, event):
        self.logger.info("Machine %s snapshot taken:" % (event.machine_id))
        if self.BASE.id_p == event.machine_id:
            for vm in self.vmlist:
                self.reclone[vm.name] = True

    def __snapshot_deleted(self, event):
        self.logger.info("Machine %s snapshot deleted:" % (event.machine_id))

    def __snapshot_changed(self, event):
        self.logger.info("Machine %s snapshot changed:" % (event.machine_id))

    def __callbacks(self):
        # snapshot events
        self.vbox.register_on_machine_state_changed(self.__machine_state)
        self.vbox.register_on_session_state_changed(self.__session_state)

        # snapshot events
        self.vbox.register_on_snapshot_taken(self.__snapshot_taken)
        self.vbox.register_on_snapshot_deleted(self.__snapshot_deleted)
        self.vbox.register_on_snapshot_changed(self.__snapshot_changed)

    # Does defined BASE vm exist?
    def get_base_image(self):

        saveme = self.BASE

        try:
           # self.BASE = self.vbox.find_machine(self.BASE)
            self.BASE = self.vbox.open_machine("/vdi/baseimage/baseimage.vbox")

        except:
            self.logger.error("ERROR: base machine missing: %s" % self.BASE)
            sys.exit()

        self.print_base_image_info()
        y = self.BASE.current_snapshot
        self.current_snapshot = y.name

        # Debug
        self.logger.info( y.name)
        self.logger.info(y.children)
        self.logger.info(y.parent)
        self.logger.info(y.get_children_count())

    def print_vbox_info(self):
        self.logger.info("")
        self.logger.info("VirtualBox Info:")
        self.logger.info("  - version: %s" % self.vbox.version)

    def print_base_image_info(self):
        self.logger.info("")
        self.logger.info("Base Image Info:")
        self.logger.info("  - Name:  %s" % self.BASE.name)
        self.logger.info("  - ID:  %s" % self.BASE.id_p)
        self.logger.info("  - State: %s" % self.BASE.state)
##        self.logger.info("  - (%s)" % self.BASE.vrde_server)
        self.logger.info("  - cpu_count: %s" % self.BASE.cpu_count)
        self.logger.info("  - current_state_modified: %s" % self.BASE.current_state_modified)
        self.logger.info("  - Snapshot count: %s" % self.BASE.snapshot_count)

    def runstuff(self, name, state):

        # This may be possible via the pyvbox module, which would be good
        # because the password would stay out of the process tables.  But
        # for now... system call
        cmd = "%s guestcontrol '%s' --username %s --password %s run --exe /bin/ps" % (VBOXMANAGE, name, self.vdiadmin, self.vdipasswd)

        if DEBUG:
            self.logger.debug(shlex.split(cmd.replace(self.vdipasswd, "******")))

        cmd = shlex.split(cmd)

        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        stdout, stderr = p.communicate()

        if mate.search(stdout):
            #we have a session
            self.active_sessions[name] = True
            self.used[name]            = True
            self.timer[name]           = time.time()

        else:
            if self.active_sessions[name]:
                self.logger.info("inactive session")
                # start idle timer
                # stop idle timer
                # inactive session, update timer and active
                self.active_sessions[name] = False
                self.timer[name]           = time.time()

            if self.reclone[name]:
                self.used[name]   = False
                return

            if str(state) in [POWEREDOFF, ABORTED]:
                self.reset_snapshot(name)

            if self.used[name]:
                self.reset_snapshot(name)

    def reset_snapshot(self, name):
        x = time.time() - self.timer[name]

        if x >= self.recycle_timeout:
            self.logger.info("Flashing")
            self.restore_snapshot(name)
            self.used[name]   = False
            self.timer[name]  = time.time()

    def get_vrde_port(self):
        self.vm_port = self.beginning_port

        if self.clone_num.search(self.clone.name):
            start = self.clone.name.find('(') + 1
            end   = self.clone.name.find(')')
            output = self.clone.name[start:end]
            self.vm_port += int(output)

    def print_clone_info(self):
        self.logger.info("")
        self.logger.info("  - Name:         %s"  % self.clone.name)
        self.logger.info("  - ID:           %s"  % self.clone.id_p)
        self.logger.info("  - State;        %s"  % self.session.state)
        self.logger.info("  - memory_size:  %sM" % self.clone.memory_size)
        self.logger.info("  - cpu_count:    %s"  % self.clone.cpu_count)
        self.logger.info("  - OS:           %s"  % self.clone.os_type_id)
#        self.logger.info("  - SnapShot:     %s"  % self.clone.current_snapshot.name)
        self.logger.info("  - Snapshots:    %s"  % self.clone.snapshot_count)
        self.logger.info("  - Groups:       %s"  % self.clone.groups)
#        self.logger.info("  - Guest Props:  %s"  % self.clone.enumerate_guest_properties(""))

    def clone_base_image(self):
        self.logger.info("")
        self.logger.info("Begin cloning:")

        # this apparently has a built in p.wait_for_completeion(-1)
                                        #mode=self.CLONE_MODE,
        self.clone = virtualbox.library.IMachine.clone(self.BASE,
                                        mode=self.CLONE_MODE,
                                        groups=["/pool"],
                                        basefolder=self.data_dir)


    def testing(self, event):
        self.logger.info( "Machine %s vrde changed: %s" % (event.machine_id, event.state))

    def get_session(self):
        self.session = self.mgr.get_session()

        self.clone.lock_machine(self.session, self.LOCKTYPE)
        self.console = self.session.console
#        self.console.register_on_vrde_server_changed(self.testing)

    def set_clone_settings(self):
        self.print_clone_info()
        self.get_vrde_port()

        vrde    = self.session.machine.vrde_server

        vrde.set_vrde_property("TCP/Ports", "%s" % self.vm_port)
        self.xray.add(self.vm_port)


        #    session.machine.groups = "/pool"
        self.session.machine.memory_size = self.memory_size
        self.session.machine.cpu_count   = self.cpu_count
        self.logger.info("")
        self.logger.info("Groups: %s" % self.session.machine.groups)
        self.logger.info("groups: %s" % type(self.session.machine.groups))
        del self.session.machine.groups[:]
        self.logger.info("Groups: %s" % self.session.machine.groups)
        self.session.machine.groups.append("/pool")
        self.logger.info("Groups: %s" % self.session.machine.groups)

#        self.logger.info("vrde: ", self.session.vrde_server_info)

        self.session.machine.save_settings()
        self.print_clone_info()

    def take_snapshot(self):

        #x, p = self.clone.take_snapshot("test1", "test2", True)
        self.session.unlock_machine()
        self.clone.lock_machine(self.session, self.LOCKTYPE)
        x, p = self.session.machine.take_snapshot("test1", "test2", True)

        self.logger.info("waiting... ")

        if SNAPSHOT_FIX:
            try:
                p.wait_for_completion(timeout=-1)
            except:
                pass
        else:
            p.wait_for_completion(timeout=-1)

        self.logger.info("snapsnot: %s" % x)
        self.session.unlock_machine()


    def restore_snapshot(self, name):

        def process_wait(item, state):
            self.pwait.wait_for_completion(timeout=-1)

            while True:
                time.sleep(1)

                if state in str(item.state):
                    break

        time.sleep(2)
        a = self.vbox.find_machine(name)
        session = self.mgr.get_session()

        if not str(a.state) in [POWEREDOFF, ABORTED]:
            a.lock_machine(session, self.LOCKTYPE)
            self.logger.info("powering down")
            self.pwait = session.console.power_down()
            process_wait(a, POWEREDOFF)

        if self.recycle_desktops:
            self.logger.info("restore snapshot: %s" % a.current_snapshot.name)
            a.lock_machine(session, self.LOCKTYPE)
            console = session.console
            snapshot = a.find_snapshot("test1")
            self.pwait = session.machine.restore_snapshot(snapshot)
            process_wait(a, POWEREDOFF)

        self.logger.info("powering up %s" %  session.state)
        if "Locked" in str(session.state):
            session.unlock_machine()

        a.launch_vm_process(session=session, type_p="headless")

    def remove_vm(self, name):
        a = self.vbox.find_machine(name)

        self.xray.delete(a.vrde_server.get_vrde_property("TCP/Ports"))

        a.remove()

    def launch_vm(self):

        #refresh session
        self.session = virtualbox.Session()

        if 0:
            self.clone.launch_vm_process(session=self.session, type_p="headless")
        else:
            self.clone.launch_vm_process(session=self.session, type_p="headless")

#        self.session.console.register_on_vrde_server_changed(self.testing)

if __name__ == "__main__":
    a = vboxvdi()
    #a.myrun()

    ##try:
    ##    a = vboxvdi()
    ##except KeyboardInterrupt:
    ##    sys.exit()
