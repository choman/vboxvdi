#!/usr/bin/python

import os
import yaml
import sys
import subprocess
import shlex
import time
import virtualbox
from virtualbox.library import LockType
import virtualbox.library
import virtualbox.library_ext
import virtualbox.pool
import re


pool      = re.compile(r'\d+$')
mate      = re.compile(r"mate-session")

VBOXMANAGE = "/usr/bin/vboxmanage"

DEBUG = False

class Config:
    def __init__(self):
        with open("config.yml", 'r') as ymlfile:
            self.config = yaml.load(ymlfile)

        self.print_debug()

    def print_debug(self):
        if DEBUG:
            for section in self.config:
                print(section)

            print(self.config['general'])
            print(self.config['pool'])
            print(self.config['pool']['data_dir'])

class IPVS:
    def __init__(self, port=None):
        self.port = 0
        self.ipvs = "/home/choman/vboxvdi/ipvsadd.sh"

    def add(self, port):
        self.cmd = "sudo %s -a %s" % (self.ipvs, port)
        self.run()

    def delete(self, port):
        self.cmd = "sudo %s -d %s" % (self.ipvs, port)
        self.run()

    def run(self):
        cmd = shlex.split(self.cmd)
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        p.communicate()

class vboxvdi:
    def __init__(self):
        inuse  = []
        count  = 0

        self.vdi  = Config()
        self.xray = IPVS()

#        print self.vdi.config["pool"]

        self.vdiadmin        = self.vdi.config["general"]["vdiadmin"]
        self.vdipasswd       = self.vdi.config["general"]["vdipasswd"]
        self.BASE            = self.vdi.config["pool"]["base_image"]

        self.initsize        = self.vdi.config["pool"]["initial_size"]
        self.freesize        = self.vdi.config["pool"]["free_size"]
        self.free_count      = 0
        self.maxcount        = self.vdi.config["pool"]["max_size"]
        self.vmlist          = []
        self.cpu_count       = self.vdi.config["pool"]["cpu_count"]
        self.memory_size     = self.vdi.config["pool"]["mem_size"]
        self.data_dir        = self.vdi.config["pool"]["data_dir"]
        self.beginning_port  = self.vdi.config["pool"]["start_vrde_port"]
        self.vm_port         = self.beginning_port
        self.state           = virtualbox.library.CloneMode(1)
        self.options         = virtualbox.library.CloneOptions(1)
        self.active_sessions = {}
        self.timer = {}

        self.PREFIX          = re.compile(r"^%s Clone" % self.BASE)
        self.clone_num       = re.compile(r"^%s Clone \(\d+\)" % self.BASE)

        self.vbox = virtualbox.VirtualBox()
        self.mgr  = virtualbox.Manager()

        self.print_vbox_info()

        self.__callbacks()
        self.__define_lock_types()

        self.get_base_image()

        while True:

            time.sleep(1)

            del self.vmlist[:]
            [self.vmlist.append(vm) for vm in self.vbox.machines if self.PREFIX.search(vm.name)]
##            [inuse.append(vm) for vm in self.vbox.machines if pool.search(vm.name)]

            self.free_count = self.cursize = len(self.vmlist)

            self.check_pool()

            if self.cursize >= self.maxcount: continue

            self.clone_vm()

            if 0:
                # simulate removing vm
                print count
                if count == 15:
                    self.remove_vm("tetsing Clone (3)")

            count += 1

    def check_pool(self):
        for vm in self.vmlist:
            self.runstuff(vm.name)

            print ("")
            print ("  - Name:   %s" % vm.name)
            print ("  - State:  %s" % vm.state)
            print ("  - Port:   %s" % vm.vrde_server.get_vrde_property("TCP/Ports"))

            if vm.name in self.active_sessions:
                print ("  - Active: %s" % self.active_sessions[vm.name])
            else:
                print ("  - Active: Unknown")

            session = self.mgr.get_session()
    

    def clone_vm(self):
        if self.cursize < self.initsize or self.free_count < self.freesize:
            self.clone_base_image()
            self.get_session()
            self.set_clone_settings()
            self.take_snapshot()
            self.launch_vm()

            self.free_count += 1

    def __define_lock_types(self):
        SHARED_LOCK = LockType(1)
        WRITE_LOCK  = LockType(2)
        VM_LOCK = virtualbox.library.LockType(3)

        SHARED_LOCK = LockType.shared
        WRITE_LOCK  = LockType.write

        self.LOCKTYPE = SHARED_LOCK

    def __machine_state(self, event):
        print "Machine %s state changed: %s" % (event.machine_id, event.state)

    def __session_state(self, event):
        print "Session %s state changed: %s" % (event.machine_id, event.state)

    def __callbacks(self):
        self.vbox.register_on_machine_state_changed(self.__machine_state)
        self.vbox.register_on_session_state_changed(self.__session_state)

    # Does defined BASE vm exist?
    def get_base_image(self):

        try:
            self.BASE = self.vbox.find_machine(self.BASE)
        except:
            print ("ERROR: base machine missing: %s" % self.BASE)
            sys.exit()
        
        self.print_base_image_info()

    def print_vbox_info(self):
        print ("")
        print ("VirtualBox Info:")
        print ("  - version: %s" % self.vbox.version)

    def print_base_image_info(self):
        print ("")
        print ("Base Image Info:")
        print ("  - Name:  %s" % self.BASE.name)
        print ("  - State: %s" % self.BASE.state)
##        print ("  - (%s)" % self.BASE.vrde_server)
        print ("  - cpu_count: %s" % self.BASE.cpu_count)
        print ("  - current_state_modified: %s" % self.BASE.current_state_modified)

    def runstuff(self, name):
        self.active_sessions[name] = False

        cmd = "%s guestcontrol '%s' --username %s --password %s run --exe /bin/ps" % (VBOXMANAGE, name, self.vdiadmin, self.vdipasswd)
        fcmd = shlex.split(cmd.replace(self.vdipasswd, "******"))
        cmd = shlex.split(cmd)

        if DEBUG: print fcmd

        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        stdout, stderr = p.communicate()
        #print "(%s)" % stdout

        if mate.search(stdout):
            #we have a session
            #print "active session, "   #, stdout
            self.active_sessions[name] = True
            self.free_count -= 1

            if name in self.timer:
                self.timer.pop(name)

        else:
            if self.active_sessions[name]:
                 print "inactive session"
                 # start idle timer
                 # stop idle timer
                 self.active_sessions[name] = False

                 if not name in self.timer:
                     self.timer[name] = time.time()
                 
                 x = time.time() -  self.timer[name]

                 if x >= 60:
                     self.remove_vm(name)
                     self.timer.pop(name)

    def get_vrde_port(self):
        self.vm_port = self.beginning_port

        if self.clone_num.search(self.clone.name):
            start = self.clone.name.find('(') + 1
            end   = self.clone.name.find(')')
            output = self.clone.name[start:end]
            self.vm_port += int(output)
             
    def print_clone_info(self):
        print ("")
        print ("  - Name:         %s"  % self.clone.name)
        print ("  - ID:           %s"  % self.clone.id_p)
        print ("  - State;        %s"  % self.session.state)
        print ("  - memory_size:  %sM" % self.clone.memory_size)
        print ("  - cpu_count:    %s"  % self.clone.cpu_count)
        print ("  - OS:           %s"  % self.clone.os_type_id)
        print ("  - Snapshots:    %s"  % self.clone.snapshot_count)
        print ("  - Groups:       %s"  % self.clone.groups)
#        print ("  - Guest Props:  %s"  % self.clone.enumerate_guest_properties(""))
    
    def clone_base_image(self):
        print ("") 
        print ("Begin cloning:")

        self.clone = virtualbox.library.IMachine.clone(self.BASE, mode=self.state,
                                          groups=["/pool"],
                                          basefolder=self.data_dir)
    def testing(self, event):
        print "Machine %s vrde changed: %s" % (event.machine_id, event.state)

    def get_session(self):
        self.session = self.mgr.get_session()

        self.clone.lock_machine(self.session, self.LOCKTYPE)
        self.console = self.session.console
#        self.console.register_on_vrde_server_changed(self.testing)

    def set_clone_settings(self):
        self.print_clone_info()
        self.get_vrde_port()

        vrde    = self.session.machine.vrde_server

        vrde.set_vrde_property("TCP/Ports", "%s" % self.vm_port)
        self.xray.add(self.vm_port)
        

        #    session.machine.groups = "/pool"
        self.session.machine.memory_size = self.memory_size
        self.session.machine.cpu_count   = self.cpu_count
        print ""
        print "Groups: ", self.session.machine.groups
        print "groups: ", type(self.session.machine.groups)
        del self.session.machine.groups[:]
        print "Groups: ", self.session.machine.groups
        self.session.machine.groups.append("/pool")
        print "Groups: ", self.session.machine.groups

#        print "vrde: ", self.session.vrde_server_info

        self.session.machine.save_settings()
        self.print_clone_info()

    def take_snapshot(self):
        print "Taking snapshot: ", self.session.machine.current_snapshot

        x, p = self.session.machine.take_snapshot("test1", "test2", True)

        print "waiting"

        try:
            p.wait_for_completion(10)
        except:
            pass

        self.session.unlock_machine()

    def remove_vm(self, name):
        a = self.vbox.find_machine(name)

        self.xray.delete(a.vrde_server.get_vrde_property("TCP/Ports"))

        a.remove()
         
    def launch_vm(self):

        #refresh session
        self.session = virtualbox.Session()

        if 0:
            self.clone.launch_vm_process(session=self.session, type_p="headless")
        else:
            self.clone.launch_vm_process(session=self.session, type_p="headless")

#        self.session.console.register_on_vrde_server_changed(self.testing)

    def runme(self):
        pass

    def vmcount(self, vmprefix):
        cmd = VBOXMANAGE + "list vms"
        cmd = shlex.split(cmd)
##        while subprocess.Popen(cmd, stdout=subprocess.PIPE) as proc:
##            print proc.stdout.read()

if __name__ == "__main__":
    a = vboxvdi()
