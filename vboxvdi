#!/usr/bin/python

import os
#import yaml
import sys
import subprocess
import shlex
import time
import virtualbox
from virtualbox.library import LockType
import virtualbox.library
import virtualbox.library_ext
import virtualbox.pool
import re


pool = re.compile(r'\d+$')
BASE   = "testing"
BASE   = "tetsing"
BASE   = "testclone"
PREFIX = re.compile(r"^%s Clone" % BASE)

VBOXMANAGE = "/usr/bin/vboxmanage"

class vboxvdi:
    def __init__(self):
        mylist = []
        inuse  = []

        self.initsize = 5
        self.freesize = 2
        self.maxcount = 10
        self.mylist = []
        self.cpu_count   = 2
        self.memory_size = 2048
        self.data_dir = "/vdi"
        self.beginning_port = 5000
        self.current_port   = self.beginning_port

        self.vbox = virtualbox.VirtualBox()
        self.mgr  = virtualbox.Manager()

        self.print_vbox_info()
        self.__define_lock_types()


        while True:

            self.get_base_image()

            del mylist[:]
            [mylist.append(vm) for vm in self.vbox.machines if PREFIX.search(vm.name)]
##            [inuse.append(vm) for vm in self.vbox.machines if pool.search(vm.name)]

            cursize = len(mylist)

            if cursize < self.initsize:

                self.clone_base_image()
                self.get_session()
                self.set_clone_settings()
                self.take_snapshot()

    def __define_lock_types(self):
        SHARED_LOCK = LockType(1)
        WRITE_LOCK  = LockType(2)
        VM_LOCK = virtualbox.library.LockType(3)

        SHARED_LOCK = LockType.shared
        WRITE_LOCK  = LockType.write

        self.LOCKTYPE = SHARED_LOCK

    # Does defined BASE vm exist?
    def get_base_image(self):

        try:
            self.BASE = self.vbox.find_machine(BASE)
        except:
            print ("ERROR: base machine missing: %s" % BASE)
            sys.exit()
        
        self.print_base_image_info()

    def print_vbox_info(self):
        print ("")
        print ("VirtualBox Info:")
        print ("  - version: %s" % self.vbox.version)

    def print_base_image_info(self):
        print ("")
        print ("Base Image Info:")
        print ("  - Name:  %s" % self.BASE.name)
        print ("  - State: %s" % self.BASE.state)
        print ("  - (%s)" % self.BASE.vrde_server)
        print ("  - cpu_count: %s" % self.BASE.cpu_count)
        print ("  - current_state_modified: %s" % self.BASE.current_state_modified)

    def print_clone_info(self):
        print ("")
        print ("  - Name:         %s"  % self.clone.name)
        print ("  - State;        %s"  % self.session.state)
        print ("  - memory_size:  %sM" % self.clone.memory_size)
        print ("  - cpu_count:    %s"  % self.clone.cpu_count)
        print ("  - OS:           %s"  % self.clone.os_type_id)
        print ("  - Snapshots:    %s"  % self.clone.snapshot_count)
    
    def clone_base_image(self):
        print ("") 
        print ("Begin cloning:")
        self.state   = virtualbox.library.CloneMode(1)
        self.options = virtualbox.library.CloneOptions(1)

        self.clone = virtualbox.library.IMachine.clone(self.BASE, mode=self.state,
                                          groups=["/pool"],
                                          basefolder=self.data_dir)

    def get_session(self):
        self.session = self.mgr.get_session()

        self.clone.lock_machine(self.session, self.LOCKTYPE)
        self.console = self.session.console

    def set_clone_settings(self):
        self.print_clone_info()
        vrde    = self.session.machine.vrde_server

        vrde.set_vrde_property("TCP/Ports", "%s" % self.current_port)
        self.current_port += 1

        #    session.machine.groups = "/pool"
        self.session.machine.memory_size = self.memory_size
        self.session.machine.cpu_count   = self.cpu_count

        self.session.machine.save_settings()
        self.print_clone_info()

    def take_snapshot(self):
        print "Taking snapshot: ", self.session.machine.current_snapshot

        x, p = self.session.machine.take_snapshot("test1", "test2", True)

        print "waiting"

        try:
            p.wait_for_completion(10)
        except:
            pass

        self.session.unlock_machine()
    
        if 0:
            self.clone.launch_vm_process(session=self.session, type_p="headless")
        else:
            self.clone.launch_vm_process(type_p="headless")

    def runme(self):
        pass

    def vmcount(self, vmprefix):
        cmd = VBOXMANAGE + "list vms"
        cmd = shlex.split(cmd)
##        while subprocess.Popen(cmd, stdout=subprocess.PIPE) as proc:
##            print proc.stdout.read()

if __name__ == "__main__":
    a = vboxvdi()
